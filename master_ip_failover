#!/usr/bin/env perl
#  Since 2014.
#  Author Jin-tae Hwang   <hjt1761@gmail.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#  Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
#

use strict;
use warnings FATAL => 'all';
use Getopt::Long;

my (
        $command,
        $ssh_user,
        $orig_master_host,
        $orig_master_ip,
        $orig_master_port,
        $orig_master_ssh_port,
        $new_master_host,
        $new_master_ip,
        $new_master_port,
        $new_master_ssh_port,
        $new_master_user,
        $new_master_password,
        $network_type,
        $gateway,
        $virtual_ip,
        $key
);

GetOptions(
        'command=s'             => \$command,
        'ssh_user=s'            => \$ssh_user,
        'orig_master_host=s'    => \$orig_master_host,
        'orig_master_ip=s'      => \$orig_master_ip,
        'orig_master_port=i'    => \$orig_master_port,
        'orig_master_ssh_port=i'=> \$orig_master_ssh_port,
        'new_master_host=s'     => \$new_master_host,
        'new_master_ip=s'       => \$new_master_ip,
        'new_master_port=i'     => \$new_master_port,
        'new_master_ssh_port=i' => \$new_master_ssh_port,
        'new_master_user=s'     => \$new_master_user,
        'new_master_password=s' => \$new_master_password,
        'network_type=s'        => \$network_type,
        'gateway=s'             => \$gateway,
        'virtual_ip=s'          => \$virtual_ip,
        'key=i'                 => \$key
);

my $ssh_start_vip = "/sbin/ifconfig $network_type:$key $virtual_ip up";
my $ssh_stop_vip  = "/sbin/ifconfig $network_type:$key down";
my $ssh_arping    = "/sbin/arping -c1 -I$network_type -s$virtual_ip $gateway";

if ($ssh_user ne "root") {
        $ssh_start_vip = "sudo ".$ssh_start_vip;
        $ssh_stop_vip  = "sudo ".$ssh_stop_vip;
        $ssh_arping    = "sudo ".$ssh_arping;
}

exit &main();

sub main {
        print "\n\nIN SCRIPT TEST\n$ssh_stop_vip\n$ssh_start_vip\n\n";
        print "\n\n$ssh_arping\n\n";

        if ( $command eq "stop" || $command eq "stopssh" ) {
           # $orig_master_host, $orig_master_ip, $orig_master_port are passed.
           # If you manage master ip address at global catalog database,
           # invalidate orig_master_ip here.
           my $exit_code = 1;
           eval {
               print "Disabling the VIP on old master: $orig_master_host \n";
               &stop_vip();
               $exit_code = 0;
           };
           if ($@) {
               warn "Got Error: $@\n";
               exit $exit_code;
           }
           exit $exit_code;
        }
        elsif ( $command eq "start" ) {
           # all arguments are passed.
           # If you manage master ip address at global catalog database,
           # activate new_master_ip here.
           # You can also grant write access (create user, set read_only=0, etc) here.
           my $exit_code = 10;
           eval {
               print "Enabling the VIP - $virtual_ip on the new master - $new_master_host \n";
               &start_vip();
               $exit_code = 0;
           };
           if ($@) {
               warn $@;
               exit $exit_code;
           }
           exit $exit_code;
        }
        elsif ( $command eq "status" ) {
           print "Checking the Status of the script.. OK \n";
           $ssh=`ssh -p $orig_master_ssh_port -T -oStrictHostKeyChecking=no $ssh_user\@$orig_master_host \" $ssh_start_vip \"`;
           print $ssh;
           exit 0;
        }
        else {
           &usage();
           exit 1;
        }
}

# A simple system call that enable the VIP on the new master
sub start_vip() {
        $ssh=`ssh -p $new_master_ssh_port -T -oStrictHostKeyChecking=no $ssh_user\@$new_master_host \"$ssh_start_vip\"`;
        print $ssh;
        $ssh=`ssh -p $new_master_ssh_port -T -oStrictHostKeyChecking=no $ssh_user\@$new_master_host \"$ssh_arping\"`;
        print $ssh;
}
# A simple system call that disable the VIP on the old_master
sub stop_vip() {
        $ssh=`ssh -p $orig_master_ssh_port -T -oStrictHostKeyChecking=no $ssh_user\@$orig_master_host \"$ssh_stop_vip\"`;
        print $ssh;
}

sub usage {
        print
        "Usage: master_ip_failover --command=start|stop|stopssh|status --orig_master_host=host --orig_master_ip=ip --orig_master_port=port --new_master_host=host --new_master_ip=ip --new_master_port=port --gateway=gateway --virtual_ip=vip --key=key\n";
}
